#######################################################################
# Test for copying block of size 63;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $63, %rdx		# src and dst have 63 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# Name:Liu Yalan
# ID:517030910228
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
# Loop header
	xorq %rax, %rax		# count = 0;
	iaddq $-7, %rdx		# len <= 7?
	jle Rest			# if so, goto Rest:

Loop:
	iaddq $7, %rdx

P1:
	mrmovq (%rdi), %r8
	mrmovq 0x8(%rdi), %r9
	rmmovq %r8, (%rsi)
	andq %r8, %r8
	jle P2
	iaddq $1, %rax

P2:
	mrmovq 0x10(%rdi), %r8
	rmmovq %r9, 0x8(%rsi)
	andq %r9, %r9
	jle P3
	iaddq $1, %rax

P3:
	mrmovq 0x18(%rdi), %r9
	rmmovq %r8, 0x10(%rsi)
	andq %r8, %r8
	jle P4
	iaddq $1, %rax

P4:
	mrmovq 0x20(%rdi), %r8
	rmmovq %r9, 0x18(%rsi)
	andq %r9, %r9
	jle P5
	iaddq $1, %rax

P5:
	mrmovq 0x28(%rdi), %r9
	rmmovq %r8, 0x20(%rsi)
	andq %r8, %r8
	jle P6
	iaddq $1, %rax

P6:
	mrmovq 0x30(%rdi), %r8
	rmmovq %r9, 0x28(%rsi)
	andq %r9, %r9
	jle P7
	iaddq $1, %rax

P7:
	mrmovq 0x38(%rdi), %r9
	rmmovq %r8, 0x30(%rsi)
	andq %r8, %r8
	jle P8
	iaddq $1, %rax

P8:
	rmmovq %r9, 0x38(%rsi)
	iaddq $0x40, %rdi
	iaddq $0x40, %rsi
	andq %r9, %r9
	jle test
	iaddq $1, %rax
	
test:
	iaddq $-15, %rdx
	jg Loop

Rest:
	iaddq $7, %rdx
	jg N1
	ret

N1:
	mrmovq (%rdi), %r8
	mrmovq 0x8(%rdi), %r9
	rmmovq %r8, (%rsi)
	andq %r8, %r8
	jle N11
	iaddq $1, %rax
N11:
	iaddq $-1, %rdx
	jne N2 
	ret

N2:
	mrmovq 0x10(%rdi), %r8
	rmmovq %r9, 0x8(%rsi)
	andq %r9, %r9
	jle N22
	iaddq $1, %rax
N22:
	iaddq $-1, %rdx
	jne N3
	ret

N3:
	mrmovq 0x18(%rdi), %r9
	rmmovq %r8, 0x10(%rsi)
	andq %r8, %r8
	jle N33
	iaddq $1, %rax
N33:
	iaddq $-1, %rdx
	jne N4
	ret

N4:
	mrmovq 0x20(%rdi), %r8
	rmmovq %r9, 0x18(%rsi)
	andq %r9, %r9
	jle N44
	iaddq $1, %rax
N44:
	iaddq $-1, %rdx
	jne N5
	ret

N5:
	mrmovq 0x28(%rdi), %r9
	rmmovq %r8, 0x20(%rsi)
	andq %r8, %r8
	jle N55
	iaddq $1, %rax
N55:
	iaddq $-1, %rdx
	jne N6
	ret

N6:
	mrmovq 0x30(%rdi), %r8
	rmmovq %r9, 0x28(%rsi)
	andq %r9, %r9
	jle N66
	iaddq $1, %rax
N66:
	iaddq $-1, %rdx
	jne N7
	ret

N7:
	rmmovq %r8, 0x30(%rsi)
	andq %r8, %r8
	jle N77
	iaddq $1, %rax
N77:
	iaddq $-1, %rdx
	ret

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad 1
	.quad 2
	.quad 3
	.quad -4
	.quad 5
	.quad -6
	.quad -7
	.quad -8
	.quad 9
	.quad 10
	.quad -11
	.quad -12
	.quad -13
	.quad 14
	.quad -15
	.quad -16
	.quad -17
	.quad 18
	.quad 19
	.quad 20
	.quad -21
	.quad -22
	.quad -23
	.quad 24
	.quad -25
	.quad 26
	.quad -27
	.quad 28
	.quad -29
	.quad -30
	.quad 31
	.quad -32
	.quad -33
	.quad -34
	.quad -35
	.quad 36
	.quad 37
	.quad 38
	.quad -39
	.quad -40
	.quad -41
	.quad -42
	.quad 43
	.quad -44
	.quad 45
	.quad 46
	.quad 47
	.quad 48
	.quad 49
	.quad -50
	.quad 51
	.quad -52
	.quad -53
	.quad -54
	.quad 55
	.quad 56
	.quad 57
	.quad 58
	.quad 59
	.quad -60
	.quad 61
	.quad -62
	.quad 63
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
